{
  "kind": "collectionType",
  "collectionName": "datas",
  "info": {
    "singularName": "data",
    "pluralName": "datas",
    "displayName": "Data"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "job_title": {
      "type": "string"
    },
    "job_id": {
      "type": "string"
    },
    "employer_name": {
      "type": "string"
    },
    "employer_logo": {
      "type": "text"
    },
    "employer_website": {
      "type": "text"
    },
    "job_publisher": {
      "type": "string"
    },
    "job_employment_type": {
      "type": "string"
    },
    "job_employment_types": {
      "type": "json"
    },
    "job_apply_is_direct": {
      "type": "boolean"
    },
    "job_apply_link": {
      "type": "text"
    },
    "apply_options": {
      "type": "json"
    },
    "job_description": {
      "type": "text"
    },
    "job_is_remote": {
      "type": "boolean"
    },
    "job_posted_at_datetime_utc": {
      "type": "string"
    },
    "job_location": {
      "type": "string"
    },
    "job_city": {
      "type": "string"
    },
    "job_state": {
      "type": "string"
    },
    "job_country": {
      "type": "string"
    },
    "job_benefits": {
      "type": "json"
    },
    "job_google_link": {
      "type": "string"
    },
    "job_min_salary": {
      "type": "decimal"
    },
    "job_max_salary": {
      "type": "decimal"
    },
    "job_salary_period": {
      "type": "string"
    },
    "job_highlights": {
      "type": "json"
    },
    "interactions": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::interaction.interaction",
      "mappedBy": "datum"
    },
    "tags": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::tag.tag",
      "mappedBy": "datum"
    },
    "geojson": {
      "type": "customField",
      "customField": "plugin::geodata.geojson",
      "options": {
        "info": true
      }
    },
    "lat": {
      "type": "float"
    },
    "lng": {
      "type": "float"
    },
    "geohash": {
      "type": "string"
    },
    "segments": {
      "type": "relation",
      "relation": "manyToMany",
      "target": "api::segment.segment",
      "inversedBy": "data"
    }
  }
}
